name: Publish container to DockerHub
on:
  schedule:
    - cron: '01 03 * * *'
  push:
    branches: ["master"]
    tags: ['*.*.*']
env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    environment:
      name: docker
    strategy:
      fail-fast: false
      matrix:
        dockerfile: [cpu, gpu]
        include:
          - dockerfile: cpu
            latest: true
          - dockerfile: gpu
            latest: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest and remove dependencies
        run: |
          python -m pytest
          pip freeze | grep -v "^-e" | xargs pip uninstall -y

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set tag variables
        id: tag_vars
        run: |
          if [[ "${{ matrix.latest }}" == "true" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "latest_tag=type=raw,value=latest" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly-${{ matrix.dockerfile }}
            type=ref,event=branch,suffix=-${{ matrix.dockerfile }}
            type=ref,event=pr,suffix=-${{ matrix.dockerfile }}
            type=semver,pattern={{version}}-${{ matrix.dockerfile }}
            type=raw,value=latest-${{ matrix.dockerfile }}
            ${{ steps.tag_vars.outputs.latest_tag }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' && steps.build-and-push.outputs.digest != '' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |-
          cosign sign --yes \
            --rekor-url=https://rekor.sigstore.dev \
            --fulcio-url=https://fulcio.sigstore.dev \
            ${TAGS}@${DIGEST}
